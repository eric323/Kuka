<!-- **********************************************************************
Name:  SpiderChartComponent
======================================================
Purpose:

This component displays a D3 SpiderChart with given parameters
======================================================
History
-------
Date        AUTHOR                  DETAIL
30/08/2016  Andreas Meyer 		    INITIAL
04/10/2016	Andreas Meyer 			DC-496 add legend for labels
25/10/2016	Andreas Meyer 			DC-666 add subgroup to competitor name (extend spacing in legend)
********************************************************************** -->
<apex:component >
<apex:attribute name="strCompetitors" description="concatinated competitors" type="String" required="required" />
<apex:attribute name="strDimensionsData" description="concatinated data structure" type="String" required="optional" />
<apex:attribute name="strDimensionsData" description="concatinated data structure" type="String" required="optional" />
<apex:attribute name="strLengendData" description="concatinated data structure" type="String" required="optional" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.3.13/d3.js"></script>

    <style>
    .svg-container {
    display: inline-block;
    position: relative;
    width: 100%;
    padding-bottom: 100%; /* aspect ratio */
    vertical-align: top;
    overflow: hidden;
    }
    .svg-content-responsive {
        display: inline-block;
        position: absolute;
        top: 10px;
        left: 0;
    }
	</style>


	<!-- -----------RADAR CHAT-----------     -->
	<script type="text/javascript">

var RadarChart = {

	// use var color = d3.scaleOrdinal().range(d3.schemeCategory20);
  draw: function(id, d, options){
  var cfg = {
	 radius: 5,
	 w: 800,
	 h: 600,
	 factor: 1,
	 factorLegend: .85,
	 levels: 8,
	 maxValue: 10,
	 radians: 2 * Math.PI,
	 opacityArea: 0.5,
	 ToRight: 5,
	 TranslateX: 80,
	 TranslateY: 30,
	 ExtraWidthX: 100,
	 ExtraWidthY: 80,
	 color: d3.scale.category10()
	};
	
	if('undefined' !== typeof options){
	  for(var i in options){
		if('undefined' !== typeof options[i]){
		  cfg[i] = options[i];
		}
	  }
	}
	cfg.maxValue = Math.max(cfg.maxValue, d3.max(d, function(i){return d3.max(i.map(function(o){return o.value;}))}));
	var allAxis = (d[0].map(function(i, j){return i.axis}));
	var total = allAxis.length;
	var radius = cfg.factor*Math.min(cfg.w/2, cfg.h/2);
	//var Format = d3.format('%');
	var Format = d3.format('0f');
	d3.select(id).select("svg").remove();

	var viewBoxHelper = "0 0 " + (cfg.w+cfg.ExtraWidthX) + " " + (cfg.h+cfg.ExtraWidthY);
	/*
	var g = d3.select(id)
			.classed("svg-container", true) //container class to make it responsive
			.append("svg")
			//.attr("width", cfg.w+cfg.ExtraWidthX)
			//.attr("height", cfg.h+cfg.ExtraWidthY)
			.classed("svg-content-responsive", true)
			.attr("version","1.1") 
			.attr("viewBox",viewBoxHelper) 
			.attr("preserveAspectRatio","xMinYMin meet")			
			.append("g")
			.attr("transform", "translate(" + cfg.TranslateX + "," + cfg.TranslateY + ")");
			;
	*/

	var g = d3.select(id)
			.append("svg")
			.attr("width", cfg.w+cfg.ExtraWidthX)
			.attr("height", cfg.h+cfg.ExtraWidthY)
			.append("g")
			.attr("transform", "translate(" + cfg.TranslateX + "," + cfg.TranslateY + ")");
			;

	var tooltip;
	
	//Circular segments
	for(var j=0; j<cfg.levels; j++){
	  var levelFactor = cfg.factor*radius*((j+1)/cfg.levels);
	  g.selectAll(".levels")
	   .data(allAxis)
	   .enter()
	   .append("svg:line")
	   .attr("x1", function(d, i){return levelFactor*(1-cfg.factor*Math.sin(i*cfg.radians/total));})
	   .attr("y1", function(d, i){return levelFactor*(1-cfg.factor*Math.cos(i*cfg.radians/total));})
	   .attr("x2", function(d, i){return levelFactor*(1-cfg.factor*Math.sin((i+1)*cfg.radians/total));})
	   .attr("y2", function(d, i){return levelFactor*(1-cfg.factor*Math.cos((i+1)*cfg.radians/total));})
	   .attr("class", "line")
	   .style("stroke", "grey")
	   .style("stroke-opacity", "0.75")
	   .style("stroke-width", "0.3px")
	   .attr("transform", "translate(" + (cfg.w/2-levelFactor) + ", " + (cfg.h/2-levelFactor) + ")");
	}

	//Text indicating at what % each level is
	for(var j=0; j<cfg.levels; j++){
	  var levelFactor = cfg.factor*radius*((j+1)/cfg.levels);
	  g.selectAll(".levels")
	   .data([1]) //dummy data
	   .enter()
	   .append("svg:text")
	   .attr("x", function(d){return levelFactor*(1-cfg.factor*Math.sin(0));})
	   .attr("y", function(d){return levelFactor*(1-cfg.factor*Math.cos(0));})
	   .attr("class", "legend")
	   .style("font-family", "sans-serif")
	   .style("font-size", "10px")
	   .attr("transform", "translate(" + (cfg.w/2-levelFactor + cfg.ToRight) + ", " + (cfg.h/2-levelFactor) + ")")
	   .attr("fill", "#737373")
	   .text(Format((j+1)*cfg.maxValue/cfg.levels));
	}
	
	series = 0;

	var axis = g.selectAll(".axis")
			.data(allAxis)
			.enter()
			.append("g")
			.attr("class", "axis");

	axis.append("line")
		.attr("x1", cfg.w/2)
		.attr("y1", cfg.h/2)
		.attr("x2", function(d, i){return cfg.w/2*(1-cfg.factor*Math.sin(i*cfg.radians/total));})
		.attr("y2", function(d, i){return cfg.h/2*(1-cfg.factor*Math.cos(i*cfg.radians/total));})
		.attr("class", "line")
		.style("stroke", "grey")
		.style("stroke-width", "1px");

	axis.append("text")
		.attr("class", "legend")
		.text(function(d){return d})
		.style("font-family", "sans-serif")
		.style("font-size", "12px")
		.attr("text-anchor", "middle")
		.attr("dy", "1.5em")
		.attr("transform", function(d, i){return "translate(0, -10)"})
		.attr("x", function(d, i){return cfg.w/2*(1-cfg.factorLegend*Math.sin(i*cfg.radians/total))-60*Math.sin(i*cfg.radians/total);})
		.attr("y", function(d, i){return cfg.h/2*(1-Math.cos(i*cfg.radians/total))-20*Math.cos(i*cfg.radians/total);});

 
	d.forEach(function(y, x){
	  dataValues = [];
	  g.selectAll(".nodes")
		.data(y, function(j, i){
		  dataValues.push([
			cfg.w/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.sin(i*cfg.radians/total)), 
			cfg.h/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.cos(i*cfg.radians/total))
		  ]);
		});
	  dataValues.push(dataValues[0]);
	  g.selectAll(".area")
					 .data([dataValues])
					 .enter()
					 .append("polygon")
					 .attr("class", "radar-chart-serie"+series)
					 .style("stroke-width", "2px")
					 .style("stroke", cfg.color(series))
					 .attr("points",function(d) {
						 var str="";
						 for(var pti=0;pti<d.length;pti++){
							 str=str+d[pti][0]+","+d[pti][1]+" ";
						 }
						 return str;
					  })
					 .style("fill", function(j, i){return cfg.color(series)})
					 .style("fill-opacity", cfg.opacityArea)
					 .on('mouseover', function (d){
										z = "polygon."+d3.select(this).attr("class");
										g.selectAll("polygon")
										 .transition(200)
										 .style("fill-opacity", 0.1); 
										g.selectAll(z)
										 .transition(200)
										 .style("fill-opacity", .7);
									  })
					 .on('mouseout', function(){
										g.selectAll("polygon")
										 .transition(200)
										 .style("fill-opacity", cfg.opacityArea);
					 });
	  series++;
	});
	series=0;


	d.forEach(function(y, x){
	  g.selectAll(".nodes")
		.data(y).enter()
		.append("svg:circle")
		.attr("class", "radar-chart-serie"+series)
		.attr('r', cfg.radius)
		.attr("alt", function(j){return Math.max(j.value, 0)})
		.attr("cx", function(j, i){
		  dataValues.push([
			cfg.w/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.sin(i*cfg.radians/total)), 
			cfg.h/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.cos(i*cfg.radians/total))
		]);
		return cfg.w/2*(1-(Math.max(j.value, 0)/cfg.maxValue)*cfg.factor*Math.sin(i*cfg.radians/total));
		})
		.attr("cy", function(j, i){
		  return cfg.h/2*(1-(Math.max(j.value, 0)/cfg.maxValue)*cfg.factor*Math.cos(i*cfg.radians/total));
		})
		.attr("data-id", function(j){return j.axis})
		.style("fill", cfg.color(series)).style("fill-opacity", .9)
		.on('mouseover', function (d){
					newX =  parseFloat(d3.select(this).attr('cx')) - 10;
					newY =  parseFloat(d3.select(this).attr('cy')) - 5;
					
					tooltip
						.attr('x', newX)
						.attr('y', newY)
						.text(Format(d.value))
						.transition(200)
						.style('opacity', 1);
						
					z = "polygon."+d3.select(this).attr("class");
					g.selectAll("polygon")
						.transition(200)
						.style("fill-opacity", 0.1); 
					g.selectAll(z)
						.transition(200)
						.style("fill-opacity", .7);
				  })
		.on('mouseout', function(){
					tooltip
						.transition(200)
						.style('opacity', 0);
					g.selectAll("polygon")
						.transition(200)
						.style("fill-opacity", cfg.opacityArea);
				  })
		.append("svg:title")
		.text(function(j){return Math.max(j.value, 0)});

	  series++;
	});
	//Tooltip
	tooltip = g.append('text')
			   .style('opacity', 0)
			   .style('font-family', 'sans-serif')
			   .style('font-size', '13px');
  }
};

	</script>
	<!-- -----------END RADAR CHAT-----------     -->

	    <div id="body">
		  <div id="chart"></div>
	    </div>
	
    	<script type="text/javascript">
			var w = 400,
				h = 400;

			var colorscale = d3.scale.category10();
			//var colorscale = d3.scaleOrdinal().range(d3.schemeCategory20);

			//Legend titles
			var LegendOptions = [{!strCompetitors}];

			// Legend labels
			var LegendValues = [{!strLengendData}];

			//Data
			var d = [
					  {!strDimensionsData} 
					];

			//Options for the Radar chart, other than default
			var mycfg = {
			  w: w,
			  h: h,
			  maxValue: 10,
			  levels: 10,
			  ExtraWidthX: 300
			}

			//Call function to draw the Radar chart
			//Will expect that data is in %'s
			RadarChart.draw("#chart", d, mycfg);

			////////////////////////////////////////////
			/////////// Initiate legend ////////////////
			////////////////////////////////////////////
			/*
			var svg = d3.select('#body')
				.selectAll('svg')
				.append('svg')
				.attr("width", w+300)
				.attr("height", h)
			*/
			var svg = d3.select('#chart')
				.selectAll('svg')
				.attr("width", 1100)
			//Create the title for the legend
			var text = svg.append("text")
				.attr("class", "title")
				.attr('transform', 'translate(250,0)') 
				.attr("x", w - 70)
				.attr("y", 10)
				.attr("font-size", "13px")
				.attr("fill", "#404040")
				.text("{!$Label.KAPCompetitorView_LegendTitle} ");


			//Create the title for the legend
			var textLabels = svg.append("text")
				.attr("class", "title")
				.attr('transform', 'translate(550,0)') 
				.attr("x", w - 70)
				.attr("y", 10)
				.attr("font-size", "13px")
				.attr("fill", "#404040")
				.text("{!$Label.KAPCompetitorView_LegendValues}");
					
			//Initiate Legend	
			var legend = svg.append("g")
				.attr("class", "legend")
				.attr("height", 100)
				.attr("width", 200)
				.attr('transform', 'translate(250,20)') 
				;
				//Create colour squares
				
				legend.selectAll('rect')
				  .data(LegendOptions)
				  .enter()
				  .append("rect")
				  .attr("x", w - 65)
				  .attr("y", function(d, i){ return i * 20;})
				  .attr("width", 10)
				  .attr("height", 10)
				  .style("fill", function(d, i){ return colorscale(i);})
				  ;
							 
				//Create text next to squares
				legend.selectAll('text')
				  .data(LegendOptions)
				  .enter()
				  .append("text")
				  .attr("x", w - 52)
				  .attr("y", function(d, i){ return i * 20 + 9;})
				  .attr("font-size", "12px")
				  .attr("fill", "#737373")
				  .text(function(d) { return d; })
				  ;	 

				// show legend labels
			var legendlabels = svg.append("g")
				.attr("class", "legend")
				.attr("height", 100)
				.attr("width", 200)
				.attr('transform', 'translate(550,20)') 
				;
				//Create colour squares
				/*
				legendlabels.selectAll('rect')
				  .data(LegendValues)
				  .enter()
				  .append("rect")
				  .attr("x", w - 65)
				  .attr("y", function(d, i){ return i * 20;})
				  .attr("width", 10)
				  .attr("height", 10)
				  ;
				 */
				 legendlabels.selectAll('circle')
				  .data(LegendValues)
				  .enter()
				  .append("circle")
				  .attr("cx", w - 65)
				  .attr("cy", function(d, i){ return i * 20 + 5;})
				  .attr("r", 5)
				  ;					 
				//Create text next to squares
				legendlabels.selectAll('text')
				  .data(LegendValues)
				  .enter()
				  .append("text")
				  .attr("x", w - 52)
				  .attr("y", function(d, i){ return i * 20 + 9;})
				  .attr("font-size", "12px")
				  .attr("fill", "#737373")
				  .text(function(d) { return d; })
				  ;	 

    	</script>

</apex:component>